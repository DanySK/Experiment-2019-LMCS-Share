module protelis:coord:sharespreading
import org.apache.commons.math3.util.FastMath.floor
import protelis:lang:utils
import protelis:state:time

/*
 * Add v to the field of distances from the current device.
 *
 * @param v num, distance to add
 * @return  num, field of distances from the current device
 */
public def addRange(v) {
    addRangeWithMetric(v, nbrRange)
}

/*
 * Add of 1 the field of distances of the current device's neighbors.
 *
 * @return num, field of distances from the current device
 */
public def addRangeHop() {
    addRangeWithMetric(1, nbrRangeHop)
}

/*
 * Add v to the field of distances from the current device.
 *
 * @param v      num, distance to add
 * @param metric () -> num, estimate distance from other devices
 * @param speed  num, communication speed
 * @return       num, field of distances from the current device
 */
public def addRangeWithLag(v, metric, speed) {
    addRangeWithMetric(v, () -> { nbrRangeLag(metric, nbrLag, speed) })
}

/*
 * Add v to the field of distances from the current device.
 *
 * @param v      num, distance to add
 * @param metric () -> num, estimate distance from other devices
 * @return       num, field of distances from the current device
 */
public def addRangeWithMetric(v, metric) {
    v + metric.apply()
}

/**
 * Self-healing gradient algorithm that reconfigures in O(diameter) time.
 * Requires euclidean metric.
 *
 * @param source bool,  whether the device is a source
 * @param maxHop num, communication max range
 * @return       num, minimum distance from the source
 */
public def crfGradient(source, maxHop) {
    crfGradientWithMetric(source, nbrRange, maxHop)
}

/**
 * Self-healing gradient algorithm that reconfigures in O(diameter) time.
 * Requires euclidean metric.
 *
 * @param source bool,  whether the device is a source
 * @param metric () -> num, how to estimate distances without lag
 * @param maxHop num, communication max range
 * @return       num, minimum distance from the source
 */
public def crfGradientWithMetric(source, metric, maxHop) {
    share (potential, nbrPotential <- [Infinity, 0]) {
        mux (source) {
            [0, 0]
        } else {
            let d = nbrPotential.get(0);
            let dt = self.getDeltaTime();
            mux (anyHood(addRangeWithLag(d, metric, potential.get(1)) <= potential.get(0))) {
                minHood([d + metric.apply(), 0])
            } else {
                let v0 = if (dt == 0) { maxHop } else { maxHop / (dt * 12) };
                [potential.get(0) + v0 * dt, v0]
            }
        }
    }.get(0)
}

/**
 * Self-healing gradient algorithm with single-path reaction speed.
 *
 * @param source bool,  whether the device is a source
 * @param radius num, communication max range
 * @param speed  num, estimate of single-path speed
 * @return       num, minimum distance from the source
 */
public def bisGradient(source, radius, speed) {
    bisGradientWithMetric(source, nbrRange, radius, speed)
}

/**
 * Self-healing gradient algorithm with single-path reaction speed.
 *
 * @param source bool,  whether the device is a source
 * @param metric () -> num, how to estimate distances without lag
 * @param radius num, communication max range
 * @param speed  num, estimate of single-path speed
 * @return       num, minimum distance from the source
 */
public def bisGradientWithMetric(source, metric, radius, speed) {
    let val = if (source) {0} else {Infinity};
    let loc = [val, val];
    share (nbrOld <- loc) {
        let nx = nbrOld.get(0) + metric.apply();
        let nt = nbrOld.get(1) + self.nbrLag() + nbr(self.getDeltaTime());
        min(minHood([max(nx, nt*speed-radius), nt]), loc)
    }.get(0)
}

/**
 * Dilate a spatial region.
 *
 * @param region bool, whether the device is inside the region
 * @param width  num, how much to dilate
 * @return       bool, dilated region
 */
 public def dilate(region, width) {
     dilateWithMetric(region, nbrRange, width)
 }

/**
 * Dilate a spatial region.
 *
 * @param region bool, whether the device is inside the region
 * @param metric () -> num, how to estimate the distance between devices
 * @param width  num, how much to dilate
 * @return       bool, dilated region
 */
public def dilateWithMetric(region, metric, width) {
     distanceToWithMetric(region, metric) < width
}

/*
 * Distance from the current to the closest source.
 *
 * @param source bool, whether the device is a source
 * @param metric () -> num, estimate distance from other devices
 * @return       num, field of minimum distances to the closest source
 */
public def distanceToWithMetric(source, metric) {
    G(source, if (source) {0} else {Infinity}, metric, (v) -> { v + metric.apply() })
}

/**
 * Estimate worst propagation time considering a message round trip.
 * 
 * @param d num, network diameter
 * @param k num, number of replicas. Must be greater than 1.
 */
public def roundTripTime(d) {
    4 * d * self.getDeltaTime()
}


// ---- Used by flexGradient
def flex_distorce(minD, metric) { 
    max(metric.apply(), minD)
}
def flex_slope(d, nbrD, minD, metric) {
   let slope = maxHood([(d - nbrD) / flex_distorce(minD, metric), nbr(d), flex_distorce(minD, metric)]);
   max(slope, [-Infinity, Infinity, 0])
}

/**
 * Flex-Gradient.
 *
 * @param source     bool, whether the device is a source
 * @param epsilon    num, tolerance
 * @param rate       num, communication rate
 * @param range      num, communication range
 * @param distortion num, distortion
 */
public def flexGradient(source, epsilon, rate, range, distortion) {
    flexGradientWithMetric(source, epsilon, rate, range, distortion, nbrRange)
}

/**
 * Flex-Gradient.
 *
 * @param source     bool, whether the device is a source
 * @param epsilon    num, tolerance
 * @param rate       num, communication rate
 * @param range      num, communication range
 * @param distortion num, distortion
 * @param metric     () -> num, estimate distance from other devices
 */
public def flexGradientWithMetric(source, epsilon, rate, range, distortion, metric) {
    share (d, nbrD <- Infinity) {
        mux (source) { 0 } 
        else {
            let dist = range * distortion;
            let slope = flex_slope(d, nbrD, dist, metric);
            let ct = minHood(nbrD + flex_distorce(dist, metric));
            if (d == ct || (d > range && d > ct * 2) || cyclicTimer(rate)) {
                ct
            } else {
                if (slope.get(0) > (1 + epsilon)) {
                    slope.get(1) + slope.get(2) * (1 + epsilon)
                } else { 
                    if (slope.get(0) < (1 - epsilon)) { 
                        slope.get(1) + slope.get(2) * (1 - epsilon)
                    } else { d }
                }
            }
        }
    }
}

/*
 * Propagate values across a spanning tree starting from the closest source.
 * If there are no sources and no neighbors, default to initial value
 *
 * @param source     bool, whether the current device is a source
 * @param initial    T, initial value of the computation
 * @param metric     () -> num, estimate distance from other devices
 * @param accumulate (T) -> T, how to accumulate the value
 * @return           T, accumulated value
 */
public def G(source, initial, metric, accumulate) {
    share (nbrDistanceValue <- [Infinity, initial]) {
        mux (source) {
            // If the device is a source then G return a 0 potential
            // and the initial value
            [0, initial]
        } else {
            // G returns the value related to the minimum potential
            let minTuple = 
               minHood([
                    // potential estimation
                    nbrDistanceValue.get(0) + metric.apply(),
                    // values estimation
                    accumulate.apply(nbrDistanceValue.get(1))
                ]);
            if (minTuple.get(0) == Infinity) { // if no neighbors or no path to source
                [Infinity, initial] // default: reset to initial value
            } else {
                minTuple
            }
        }
    }.get(1) // return the accumulated value
}

/**
 * Gradcast.
 *
 * @param source     bool, whether the device is a source
 * @param local      T, local value
 * @param gradient   num, gradient to follow
 * @param accumulate (T) -> T, how to accumulate local values
 * @return           T, accumulated value
 */
public def gradcast(source, local, gradient, accumulate) {
    share (nbrValue <- local) {
        mux (source) {
            local
        } else {
            minHood([nbr(gradient), accumulate.apply(nbrValue)]).get(1)
        }
    }
}

/*
 * Distance from the current to the closest source, measured in hops
 *
 * @param source bool, whether the current device is a source
 * @return       num, number of hops to the closest source
 */
public def hopDistanceTo(source) {
    distanceToWithMetric(source, () -> {1})
}

/**
 * Count the number of neighbors.
 *
 * @return num, number of neighbors
 */
public def neighborhood() {
    sumHood(nbr(1))
}

/**
 * Time forward view.
 *
 * @return num, expected time from the device computation to
 *         neighbor's next computation incorporating that information.
 */
public def nbrDelay() {
    self.nbrDelay()
}

/**
 * Time backward view.
 *
 * @return num, how long ago information from neighbors was received.
 */
public def nbrLag() {
    self.nbrLag()
}

/*
 * Estimate the distance of the current device.
 *
 * @return num, field of distances from the current device
 */
public def nbrRange() {
    self.nbrRange()
}

/*
 * Estimate the distance from the current device.
 *
 * @return num, field of 1s for each neighbor
 */
public def nbrRangeHop() {
    1
}

/*
 * Estimate the distance of the current device.
 *
 * @param metric    () -> num, how to estimate distances
 * @param lagmetric () -> num, how to estimate latencies
 * @param speed     num, communication speed
 * @return          num, field of distances from the current device
 */
public def nbrRangeLag(metric, lagMetric, speed) {
    metric.apply() + (lagMetric.apply() + self.getDeltaTime()) * speed
}

/**
 * Computing a Voronoi partition is an operation that is frequently useful in
 * distributed systems. Given an initial set of seed devices, a Voronoi
 * partition assigns each device to the partition of the nearest seed,
 * effectively breaking the network up into zones of influence around key
 * elements.
 *
 * @param source bool, whether the device is a seed
 * @param id     T, partition id
 * @return       T, partition of the nearest seed
 */
public def shareVoronoiPartitioning(source, id) {
    shareVoronoiPatitioningWithMetric(source, id, nbrRange)
}

/**
 * Computing a Voronoi partition is an operation that is frequently useful in
 * distributed systems. Given an initial set of seed devices, a Voronoi
 * partition assigns each device to the partition of the nearest seed,
 * effectively breaking the network up into zones of influence around key
 * elements.
 *
 * @param source bool, whether the device is a seed
 * @param id     T, partition id
 * @param metric () -> num, how to estimate the distances of the neighbors
 * @return       T, partition of the nearest seed
 */
public def shareVoronoiPatitioningWithMetric(seed, id, metric) {
    G(seed, id, metric, identity)
}
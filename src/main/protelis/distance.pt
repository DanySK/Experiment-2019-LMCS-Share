module distance

import java.lang.Double.*
import utils

/**
 * Bounded Information Speed Distance Estimation, using rep+nbr.
 *
 * @param source  whether the device is a source
 * @param speed   average communication speed
 * @param radius  communication radius
 * @return        estimated distance in space and time
 */
public def repDistance(source, speed, radius, myId) {
    rep (old <- [Infinity, Infinity, NaN]) {
        mux (source) {[0,0, myId]} else {
            let dx = nbr(old.get(0)) + repRange();
            let dt = nbr(old.get(1)) + repLag();
            let ids = nbr(old.get(2));
            minHood([max(dx, dt*speed-radius), dt, ids])
        }
    }
}

/**
 * Bounded Information Speed Distance Estimation, using share.
 *
 * @param source  whether the device is a source
 * @param speed   average communication speed
 * @param radius  communication radius
 * @return        estimated distance in space and time
 */
public def shareDistance(source, speed, radius, myId) {
    share (old <- [Infinity, Infinity, NaN]) {
        mux (source) {[0,0, myId]} else {
            let dx = old.get(0) + shareRange();
            let dt = old.get(1) + shareLag();
            let ids = old.get(2);
            minHood([max(dx, dt*speed-radius), dt, ids])
        }
    }
}

module collection

import java.lang.Double.* 
import utils

/**
 * Weighted Multi-Path Max-Collection, using rep+nbr.
 *
 * @param dist   distance from the source
 * @param value  input value
 * @return       estimated maximum value
 */
public def repCollection(dist, value) {
    rep (old <- value) {
    	let threshold = maxHood(mux (nbr(isInfinite(dist))) { 0 } else { (nbr(dist)-dist)/repLag() }) / 2;
        let nbrValues = mux (nbr(dist) > dist + repLag()*threshold && !isInfinite(nbr(old).get(0))) { nbr(old) } else { value };
        maxHood PlusSelf(nbrValues)
    }
}

/**
 * Weighted Multi-Path Max-Collection, using share.
 *
 * @param dist   distance from the source
 * @param value  input value
 * @return       estimated maximum value
 */
public def shareCollection(dist, value) {
    share (old <- value) {
    	let threshold = maxHood(mux (nbr(isInfinite(dist))) { 0 } else { (nbr(dist)-dist)/shareLag() }) / 2;
        let nbrValues = mux (nbr(dist) > dist + shareLag()*threshold && !isInfinite(old.get(0))) { old } else { value };
        maxHood PlusSelf(nbrValues)
    }
}

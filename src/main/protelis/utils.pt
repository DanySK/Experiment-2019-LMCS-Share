module utils

import java.lang.Math.*
import it.unibo.alchemist.custom.CoordinationUtil.*

// SPATIAL FUNCTIONS
////////////////////

// Crop a coordinate to fit into a rectangle.
def cropRectangle(x, low, hi) {
    [min(max(x.get(0), low.get(0)), hi.get(0)),
     min(max(x.get(1), low.get(1)), hi.get(1))]
}

// Uniform random vector of norm up to r.
def randVector(r) {
    let theta = 2*pi*self.nextRandomDouble();
    sqrt(self.nextRandomDouble()) * r * [cos(theta),sin(theta)]
}

// Random vector within the rectangle bounded by points "lo" and "hi".
def randRect(lo, hi) {
    [lo.get(0) + (hi.get(0)-lo.get(0))*self.nextRandomDouble(),
         lo.get(1) + (hi.get(1)-lo.get(1))*self.nextRandomDouble()]
}

// Returns a goal by applying function "goal", and regenerates it whenever
// the distance from the current goal drops below "mindist".
def ifClose(goal, dist) {
    rep (x <- goal.apply()) {
//        if (self.distanceTo(x) <= dist)
        if (computeDistance(self, x) <= dist)
        { goal.apply() } else { x }
    }
}

// Walk to random targets within a rectangle of given size (and within a range if given), changing targets within reach.
public def rectangleWalkRange(lo, hi, dspace, reach) {
    env.put('target', ifClose(() -> {cropRectangle(self.getCoordinates()+randVector(dspace), lo, hi)}, reach))
}
public def rectangleWalk(lo, hi, reach) {
    env.put('target', ifClose(() -> {randRect(lo, hi)}, reach))
}

// TEMPORAL FUNCTIONS
/////////////////////

// Mean value every frequency time.
public def meanCounter(val, frequency) {
    let time = self.getCurrentTime();
    let dt = if (self.getDeltaTime() == 0) {time} else {self.getDeltaTime()};
    let null = [0, 0];
    let count = rep (x <- null) {
            let restart = rep (t <- [false, time]) {
                    [floor(time/frequency) > floor(t.get(1)/frequency), time]
            }.get(0);
            let old = if (restart) {null} else {x};
            if (-Infinity < val && val < Infinity) {
                    old + [val*dt, dt]
            } else {old}
    };
    count.get(0)/count.get(1)
}

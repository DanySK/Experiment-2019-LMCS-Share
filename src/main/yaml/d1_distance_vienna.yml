incarnation: protelis

variables:
  rhol: &rhol     # density level
    min: 20
    max: 50
    step: 2
    default: 20
  ratel: &ratel   # frequency level
    min: 0
    max: 2
    step: 1
    default: 2
  random: &random # random seed
    min: 0
    max: 4
    step: 1
    default: 0
    
  num: &num                 # number of devices
    formula: "$rhol * $rhol"
  rate: &rate               # period length
    formula: "$ratel == 0 ? 0.2 : $ratel == 1 ? 1 : 5"
  drate: &drate             # 10% error in period length 
    formula: "0.1 * $rate"
  mrate: &mrate             # frequency of movement steps
    formula: "1.0 / $rate"
  retain: &retain           # values are deemed obsolete after 1.5 rounds
    formula: "1.5 * $rate"
  step: &step               # counteract Alchemist's bug on GPS coordinates
    formula: "1.5 * $rate * $rate"
  radius: &radius           # communication radius
    formula: "75"
    
seeds:
  scenario: *random
  simulation: *random

# Loads the Vienna city map and sets the communication radius.
environment:
  type: OSMEnvironment
  parameters: ["/vcm.pbf", false]
   
network-model:
  type: EuclideanDistance
  parameters: [*radius]

pools:
  - pool: # alternate distribution for the target walker, not really working
    - time-distribution: *mrate
      type: Event
      actions:
        # follow the target with fixed speed (step each turn)
        - type: TargetWalker
          parameters: [target, *step]
  - pool: &program
    - time-distribution:
        # perform rounds according to a Weibull distribution of "rate" mean and deviation "drate" within devices and across devices
        type: WeibullDistributedWeibullTime
        parameters: [*rate, *drate, *drate]
      type: Event
      actions:
        # run the "isolation" field calculus program 
        - type: RunProtelisProgram
          parameters: [d1_distance_vienna, *retain]
        # follow the target with fixed speed (step each turn)
        - type: TargetWalker
          parameters: [target, *step]
    - program: send
  - pool: &deviceContent # makes simulation parameters available in the program
      - molecule: num
        concentration: *num
      - molecule: rate
        concentration: *rate

# Initial displacements of devices 
displacements:
  # source device
  - in:
      type: Point
      parameters: [48.208, 16.375] # center of the area
    programs:
      - *program
    contents: *deviceContent
  # other devices
  - in:
      type: Rectangle
      parameters: [*num, 48.205, 16.37, 0.006, 0.01] # 667.2x741m
    programs:
      - *program
    contents: *deviceContent
